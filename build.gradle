plugins {
    id "dev.architectury.loom" version "1.6.397"
    id "maven-publish"
}

apply plugin: 'java'

version = minecraft_version + "-" + mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    neoForge "net.neoforged:neoforge:${neoforge_version}"

    mappings loom.officialMojangMappings()

    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:0.8.4:processor"
    }

    implementation 'com.jayway.jsonpath:json-path:2.9.0'
    forgeRuntimeLibrary 'com.jayway.jsonpath:json-path:2.9.0'
    include 'com.jayway.jsonpath:json-path:2.9.0'

    implementation 'org.yaml:snakeyaml:2.2'
    forgeRuntimeLibrary 'org.yaml:snakeyaml:2.2'
    include 'org.yaml:snakeyaml:2.2'

    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    implementation 'org.jetbrains:annotations:20.1.0'
}

def resourceTargets = ['META-INF/neoforge.mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version: minecraft_version, forge_version: neoforge_version,
        mod_id           : mod_id, mod_name: mod_name, mod_version: mod_version,
        mod_authors      : mod_authors
]

processResources {
    inputs.properties replaceProperties

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar {
    manifest {
        attributes([
                "MixinConfigs"            : mod_id + ".mixins.json",
                "Specification-Title"     : mod_id,
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}